import { connect } from 'react-redux';
import { toggleTodo } from '../actions';
import TodoList from '../components/TodoList';
import { getVisibleTodos } from '../selectors'

//a container component generated by react-redux's connect (optimized)

//two required arguments for connect(HOF) to make the HOC, which will then make the Container component


// const getVisibleTodos = (todos, filter) => {
//   console.log('derive props from state by transformation');
//   switch (filter) {
//     case 'SHOW_ALL':
//       return todos
//     case 'SHOW_COMPLETED':
//       return todos.filter(t=>t.completed)
//     case 'SHOW_ACTIVE':
//       return todos.filter(t=>!t.completed)
//   }
// }

//1.mapStateToProps 2.mapDispatchToProps(as callback, still props)

//1. return an props object
const mapStateToProps = state => {
  console.log('mapStateToProps')
  return {
    // todos: getVisibleTodos(state.todos, state.visibilityFilter) 
    //whenever there is a heavy transform from the minial state tree data to props for ui, consider cache them
    todos: getVisibleTodos(state)
  }
}

//2. similar for callback props, which will dispatch action to store
const mapDispatchToProps = dispatch => {
  return {
    onTodoClick: id => {
      dispatch(toggleTodo(id));
    }
  }
}

//finally we create HOC and then the Container Comp by calling connect
const VisibleTodoList = connect(
  mapStateToProps,
  mapDispatchToProps
)(TodoList);

export default VisibleTodoList;